{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project 2022\\\\src\\\\CryptoContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Crypto = /*#__PURE__*/createContext();\n\nconst CryptoContext = ({\n  children\n}) => {\n  _s();\n\n  const [currency, setCurrency] = useState(\"INR\");\n  const [symbol, setSymbol] = useState(\"₹\");\n  const [coins, setCoins] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchCoins = async () => {\n    setLoading(true);\n    const {\n      data\n    } = await axios.get(CoinList(currency));\n    console.log(data);\n    setCoins(data);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (currency === \"INR\") setSymbol(\"₹\");else if (currency === \"USD\") setSymbol(\"$\");else if (currency === \"EUR\") setSymbol(\"€\");else if (currency === \"CAD\") setSymbol(\"$\");\n  }, [currency]);\n  return /*#__PURE__*/_jsxDEV(Crypto.Provider, {\n    value: {\n      currency,\n      setCurrency,\n      symbol,\n      coins,\n      loading,\n      fetchCoins\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CryptoContext, \"9NwfvxiVnTR1VONgtsT7x3I53FQ=\");\n\n_c = CryptoContext;\nexport default CryptoContext;\nexport const CryptoState = () => {\n  _s2();\n\n  return useContext(Crypto);\n};\n\n_s2(CryptoState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c2 = CryptoState;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CryptoContext\");\n$RefreshReg$(_c2, \"CryptoState\");","map":{"version":3,"sources":["E:/Project 2022/src/CryptoContext.js"],"names":["React","createContext","useContext","useEffect","useState","Crypto","CryptoContext","children","currency","setCurrency","symbol","setSymbol","coins","setCoins","loading","setLoading","fetchCoins","data","axios","get","CoinList","console","log","CryptoState"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;;AAEA,MAAMC,MAAM,gBAAGJ,aAAa,EAA5B;;AAEA,MAAMK,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACtC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,GAAD,CAApC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMY,UAAU,GAAG,YAAY;AAC7BD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAMC,KAAK,CAACC,GAAN,CAAUC,QAAQ,CAACZ,QAAD,CAAlB,CAAvB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAPD;;AASAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,KAAK,KAAjB,EAAwBG,SAAS,CAAC,GAAD,CAAT,CAAxB,KACK,IAAIH,QAAQ,KAAK,KAAjB,EAAwBG,SAAS,CAAC,GAAD,CAAT,CAAxB,KACA,IAAIH,QAAQ,KAAK,KAAjB,EAAwBG,SAAS,CAAC,GAAD,CAAT,CAAxB,KACA,IAAIH,QAAQ,KAAK,KAAjB,EAAwBG,SAAS,CAAC,GAAD,CAAT;AAC9B,GALQ,EAKN,CAACH,QAAD,CALM,CAAT;AAOA,sBACE,QAAC,MAAD,CAAQ,QAAR;AAAiB,IAAA,KAAK,EAAE;AAAEA,MAAAA,QAAF;AAAYC,MAAAA,WAAZ;AAAyBC,MAAAA,MAAzB;AAAkCE,MAAAA,KAAlC;AAA0CE,MAAAA,OAA1C;AAAmDE,MAAAA;AAAnD,KAAxB;AAAA,cACGT;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3BD;;GAAMD,a;;KAAAA,a;AA6BN,eAAeA,aAAf;AAEA,OAAO,MAAMiB,WAAW,GAAG,MAAM;AAAA;;AAC/B,SAAOrB,UAAU,CAACG,MAAD,CAAjB;AACD,CAFM;;IAAMkB,W;;MAAAA,W","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nconst Crypto = createContext();\r\n\r\nconst CryptoContext = ({ children }) => {\r\n  const [currency, setCurrency] = useState(\"INR\");\r\n  const [symbol, setSymbol] = useState(\"₹\");\r\n  const [coins, setCoins] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchCoins = async () => {\r\n    setLoading(true);\r\n    const { data } = await axios.get(CoinList(currency));\r\n    console.log(data);\r\n\r\n    setCoins(data);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currency === \"INR\") setSymbol(\"₹\");\r\n    else if (currency === \"USD\") setSymbol(\"$\");\r\n    else if (currency === \"EUR\") setSymbol(\"€\");\r\n    else if (currency === \"CAD\") setSymbol(\"$\");\r\n  }, [currency]);\r\n\r\n  return (\r\n    <Crypto.Provider value={{ currency, setCurrency, symbol , coins , loading ,fetchCoins }}>\r\n      {children}\r\n    </Crypto.Provider>\r\n  );\r\n};\r\n\r\nexport default CryptoContext;\r\n\r\nexport const CryptoState = () => {\r\n  return useContext(Crypto);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}